#05.12.2015

Abgeschlossen:
  - Errechnung der endültigen Priorität der einzelnen Events (aber nur grob, Feinabstimmungen können erst gemacht werden,
  sobald wir ein optisches Feedback integriert haben)
  - Sortierung des Arrays vor Ausgabe möglich
  
In Arbeit:
  - die nächste große Aufgabe ist es nun, die einzelnen Events auf der index.html Seite anzuzeigen. 
 Das schwierigste an dieser Aufgabe ist es, einen Algorythmus zu finden, der die verschieden großen
 Kacheln in einer uns angenehmen Form anordnet. Dies muss dynamisch sein, da sich jeder Zeit die 
 Priorität der einzelnen Events ändern kann, sowie neue Events hinzukomen und Alte verschwinden.
 
 Angedacht ist eine Lösung per Schleife, welche die Postion der einzelnen Kacheln aufgrund der Priorität (also 
 Größe) ermittelt und direkt als HTML-CODE ausgibt.
 
 
weitere Aufgaben:
  - weiterhin editEvent.php
    Um ein Event nachträglich anzupassen, muss diese ersteinmal gelesen werden (loadEvents.php), 
    dann in ein HTML-Formular geschrieben werden, Änderungen wieder in dem Array übernommen werden,
    am Ende muss die komplette Textdatei neu geschrieben werden.
    Problem:
      - Übergabe von werten innerhalb des .php-Datei funktioniert nicht richtig.
    Lösung:
      - Recherche Struktur von php/html mix code, Verhalten von Variablen.
      - Alternative wäre es die textdatei nur zu verändern und nicht neu zu schreiben.
      
  - Sicherheitsmechanismen, wie das vermeiden von doppelten Events, oder leeren Eingaben.

=== Feedback Alpers, Dez 11 ===

Bitte lassen Sie solche Design-Aspekte außen vor. Es ist sicherlich nett, wenn eine Webanwendung
Elemente in Abhängigkeit von deren Priorität unterschiedlich skaliert, aber stellen Sie solche Aspekte
bitte hinten an.

Viel wichtiger ist, dass Sie lernen, zunächst grundlegende Aufgaben zu lösen. (Was Sie mit dem Speichern
und Lesen in Dateien ja beispielsweise schon einmal erreicht haben.) Dann sollten Sie sich darin üben,
als Teamplayer eine Aufgabe eng verzahnt mit anderen Kollegen zu erledigen. (Das wäre hier das Entwickeln
von PHP-Code, der direkt mit einer Komponente der Nutzeroberfläche (also in diesem Fall des HTML-Dokuments)
verknüpft ist, sodass es später leicht ist, das gewünschte Verhalten anzupassen.

Ein weitere Aspekt, den Sie sich parallel dazu angewöhnen sollten besteht darin, Code zu entwickeln,
der auch von Personen leicht erfasst werden kann, die in das Team integriert werden. Nichts in schlimmer als
wenn Teammitglieder Code entwickeln, den anschließend niemand verstehen kann, ohne sich zunächst stundenlang damit zu
beschäftigen.

=== Feedback Alpers, Ende ===